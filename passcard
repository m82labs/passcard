#!/usr/bin/env python

# PassCard.py
# -*- coding: utf-8 -*-

"""
Program: PassCard is a program used to generate a card that helps the user
         create secure, easy to remember passwords.
Author:  Mark Wilkinson
Date:    2016.04.24
"""

import hashlib
import sys
import uuid
import argparse
from string import ascii_lowercase, ascii_uppercase, digits, punctuation

# Parse command line arguments
parser = argparse.ArgumentParser()
parser.add_argument("-p","--passphrase", help="Passphrase used to generate a PassCard")
parser.add_argument("-o","--output", help="File to output HTML card to")
parser.add_argument("-d","--digits", help="Include character combinations for digits 0-9",action="store_true")
args = parser.parse_args()

if args.passphrase:
    passphrase = args.passphrase
else:
    passphrase = str(uuid.uuid1())

if args.output:
    try:
        output = open(args.output,'w')
    except:
        print "Error opening output file: " + sys.exc_info()[2]

if args.digits:
    key_chars = ascii_lowercase + digits
else:
    key_chars = ascii_lowercase

# Hash our passphrase
ph = hashlib.sha512()
ph.update(passphrase)
big_hash = str(ph.hexdigest())

# For each character we plan to print to our grid 
# (ASCII lower characters and digits) we generate
# 3 psudoe-random characters from our big_hash
grid = {}
big_hash_pos = 0
chunk_size = 4
rand_chars = 3
chars = ascii_lowercase + ascii_uppercase + punctuation + digits + ascii_lowercase + ascii_uppercase + digits
char_pool = [i for i in chars+chars if i not in ('%','&',':','"','/','\\','{','}','[',']',')','(',"'",';','.','`',',','<','>') ]

for gridpos in ascii_lowercase + digits:
    grid[gridpos] = ''
    for i in range(0,rand_chars):
        grid[gridpos] += char_pool[int(big_hash[big_hash_pos:big_hash_pos+chunk_size],16) % len(char_pool)]
        big_hash_pos += 1

# Output HTML template
outHTML = """<html>
  <head>
    <title>Generated by PassCard</title>
  </head>
  <body style="height: 11in; width: 8.5in; margin: 0 0 0 0; padding: 0px;">
    <div style="line-height:1.4em; font-family: monospace; width: 3.5in; height: 2in; position: relative; border: 1px solid #EEE">
    <div style="position: absolute; padding: 0em 2em; top: 50%; transform: translateY(-50%);">
{{passgrid}}
    </div>
    <span style="color: #EEE; position: absolute; bottom: 0%; right: 0%; padding: 1.0em;">Generated by PassCard</span>
    </div>
  </body>
</html>
"""

passgrid = ''
i = 1

# Create an output grid
for c in key_chars:
    if i >= 1:
        passgrid += c + ':' + grid[c]

    # Group character sets in lines of 5 groups
    if i % 5 == 0:
        passgrid += '\n'
        # Reset the counter
        i = 0
    else:
        passgrid += ' '

    # Increment the loop counter
    i += 1

# Output our pass grid either to HTML or console
if 'output' in locals():
    output.write(outHTML.replace('{{passgrid}}',passgrid))
    print "\nFile generated.\n"
else:
    print "\n-------------------------------\n " + passgrid + "\n-------------------------------\n" 

# Output the passphrase used to generate the card
print "The following passphrase can be used to regenerate your card:\n" + passphrase




